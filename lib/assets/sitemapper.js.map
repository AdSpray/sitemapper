{"version":3,"sources":["../../src/assets/sitemapper.js"],"names":["CancelToken","axios","source","Sitemapper","options","debug","progress","timeout","timeoutTable","url","settings","headers","console","log","Promise","resolve","crawl","then","sites","requestOptions","method","cancelToken","token","response","status","clearTimeout","error","data","responseType","pipe","writeable","chunks","on","chunk","push","Buffer","concat","message","isCancel","stack","initializeTimeout","callback","setTimeout","cancel","parse","process","stderr","write","urlset","map","site","loc","length","stdout","sitemapindex","sitemap","promiseArray","all","results","filter","result","reduce","prev","curr","warn","err","fetch","duration"],"mappings":"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","sourcesContent":["/**\n * Sitemap Parser\n *\n * Copyright (c) 2020 Sean Thomas Burke\n * Licensed under the MIT license.\n * @author Sean Burke <@seantomburke>\n */\n\nimport xmlParse from 'xml2js-es6-promise';\nimport axios from 'axios';\n\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\n/**\n * @typedef {Object} Sitemapper\n */\nexport default class Sitemapper {\n  /**\n   * Construct the Sitemapper class\n   *\n   * @params {Object} options to set\n   * @params {string} [options.url] - the Sitemap url (e.g http://wp.seantburke.com/sitemap.xml)\n   * @params {Timeout} [options.timeout] - @see {timeout}\n   *\n   * @example let sitemap = new Sitemapper({\n   *   url: 'http://wp.seantburke.com/sitemap.xml',\n   *   timeout: 15000\n   *  });\n   */\n  constructor(options = {}) {\n    this.debug = options.debug;\n    this.progress = options.progress;\n    this.timeout = options.timeout || 15000\n    this.timeoutTable = [];\n    this.url = options.url;\n    this.settings = { \n      timeout: this.timeout,\n      url: this.url,\n      ...options,\n      headers: {\n        ...options.headers,\n      },\n     };\n  }\n\n  /**\n   * Gets the sites from a sitemap.xml with a given URL\n   *\n   * @public\n   * @param {string} [url] - the Sitemaps url (e.g http://wp.seantburke.com/sitemap.xml)\n   * @returns {Promise<SitesData>}\n   * @example sitemapper.fetch('example.xml')\n   *  .then((sites) => console.log(sites));\n   */\n  fetch(url = this.url) {\n    this.url = url;\n    if (this.debug || this.progress) console.log('Fetching urls for ', url); // eslint-disable-line no-console\n    return new Promise(resolve => this.crawl(url).then(sites => resolve({ url, sites })));\n  }\n\n  /**\n   * Get the timeout\n   *\n   * @example console.log(sitemapper.timeout);\n   * @returns {Timeout}\n   */\n  static get timeout() {\n    return this.timeout;\n  }\n\n  /**\n   * Set the timeout\n   *\n   * @public\n   * @param {Timeout} duration\n   * @example sitemapper.timeout = 15000; // 15 seconds\n   */\n  static set timeout(duration) {\n    this.timeout = duration;\n  }\n\n  /**\n   *\n   * @param {string} url - url for making requests. Should be a link to a sitemaps.xml\n   * @example sitemapper.url = 'http://wp.seantburke.com/sitemap.xml'\n   */\n  static set url(url) {\n    this.url = url;\n  }\n\n  /**\n   * Get the url to parse\n   * @returns {string}\n   * @example console.log(sitemapper.url)\n   */\n  static get url() {\n    return this.url;\n  }\n\n  /**\n   * Requests the URL and uses xmlParse to parse through and find the data\n   *\n   * @private\n   * @param {string} [url] - the Sitemaps url (e.g http://wp.seantburke.com/sitemap.xml)\n   * @returns {Promise<ParseData>}\n   */\n  parse(url = this.url) {\n    if (this.debug) console.log('\\n[Debug]: Crawling ', url); // eslint-disable-line no-console\n    const requestOptions = {\n      ...this.settings,\n      method: 'GET',\n      url,\n      timeout: this.timeout,\n      cancelToken: source.token,\n    };\n\n    return new Promise((resolve) => {\n      axios(requestOptions)\n        .then((response) => {\n          if (!response || response.status !== 200) {\n            clearTimeout(this.timeoutTable[url]);\n            return resolve({ error: response.error, data: response });\n          } else if (this.settings.responseType === 'stream') {\n            response.data.pipe(writeable);\n            const chunks = [];\n            writeable.on(\"data\", function (chunk) {\n              chunks.push(chunk);\n            });\n            writeable.on(\"end\", function () {\n              xmlParse(Buffer.concat(chunks));\n            });\n          }\n          return xmlParse(response.data);\n        })\n        .then(data => resolve({ error: null, data }))\n        .catch(error => {\n          let message = (axios.isCancel(error)) ? 'request timed out' : error.stack; \n          resolve({ error: message, data: {} });\n        });\n\n      this.initializeTimeout(url, resolve);\n    });\n  }\n\n  /**\n   * Timeouts are necessary for large xml trees. This will cancel the call if the request is taking\n   * too long, but will still allow the promises to resolve.\n   *\n   * @private\n   * @param {string} url - url to use as a hash in the timeoutTable\n   * @param {Promise} requester - the promise that creates the web request to the url\n   * @param {Function} callback - the resolve method is used here to resolve the parent promise\n   */\n  initializeTimeout(url, callback) {\n    // this resolves instead of rejects in order to allow other requests to continue\n    this.timeoutTable[url] = setTimeout(() => {\n      source.cancel('Operation canceled by the user.');\n\n      callback({\n        error: `request timed out after ${this.timeout} milliseconds`,\n        data: {},\n      });\n    }, this.timeout);\n  }\n\n  /**\n   * Recursive function that will go through a sitemaps tree and get all the sites\n   *\n   * @private\n   * @recursive\n   * @param {string} url - the Sitemaps url (e.g http://wp.seantburke.com/sitemap.xml)\n   * @returns {Promise<SitesArray> | Promise<ParseData>}\n   */\n  crawl(url) {\n    return new Promise((resolve) => {\n      this.parse(url).then(({ error, data }) => {\n        // The promise resolved, remove the timeout\n        clearTimeout(this.timeoutTable[url]);\n\n        if (error) {\n          // Fail silently\n          if (this.debug) console.debug('[Debug]:', error); // eslint-disable-line no-console\n          else if (this.progress) process.stderr.write('x');\n          return resolve([]);\n        } else if (data && data.urlset && data.urlset.url) {\n          const sites = data.urlset.url.map(site => site.loc && site.loc[0]);\n          if (this.debug) console.debug('[Debug]:', sites.length, ' sites retrieved'); // eslint-disable-line no-console\n          else if (this.progress) process.stdout.write('.');\n\n          return resolve([].concat(sites));\n        } else if (data && data.sitemapindex) {\n          // Map each child url into a promise to create an array of promises\n          const sitemap = data.sitemapindex.sitemap.map(map => map.loc && map.loc[0]);\n          const promiseArray = sitemap.map(site => this.crawl(site));\n          if (this.debug) console.debug('[Debug]: Diving deeper into', sitemap.length, 'more sitemaps'); // eslint-disable-line no-console\n          else if (this.progress) process.stdout.write('↓');\n\n          // Make sure all the promises resolve then filter and reduce the array\n          return Promise.all(promiseArray).then(results => {\n            const sites = results.filter(result => !result.error)\n              .reduce((prev, curr) => prev.concat(curr), []);\n\n            return resolve(sites);\n          });\n        }\n        // Fail silently\n        return resolve([]);\n      });\n    });\n  }\n\n\n  /**\n   * /**\n   * Gets the sites from a sitemap.xml with a given URL\n   * @deprecated\n   * @param {string} url - url to query\n   * @param {getSitesCallback} callback - callback for sites and error\n   * @callback\n   */\n  getSites(url = this.url, callback) {\n    console.warn(  // eslint-disable-line no-console\n      'function getSites() is deprecated, please use the function fetch()'\n    );\n\n    let err = {};\n    let sites = [];\n    this.fetch(url).then(response => {\n      sites = response.sites;\n    }).catch(error => {\n      err = error;\n    });\n    return callback(err, sites);\n  }\n}\n\n/**\n * Callback for the getSites method\n *\n * @callback getSitesCallback\n * @param {Object} error - error from callback\n * @param {Array} sites - an Array of sitemaps\n */\n\n/**\n * Timeout in milliseconds\n *\n * @typedef {Number} Timeout\n * the number of milliseconds before all requests timeout. The promises will still resolve so\n * you'll still receive parts of the request, but maybe not all urls\n * default is 15000 which is 15 seconds\n */\n\n/**\n * Resolve handler type for the promise in this.parse()\n *\n * @typedef {Object} ParseData\n *\n * @property {Error} error that either comes from `xmlParse` or `request` or custom error\n * @property {Object} data\n * @property {string} data.url - URL of sitemap\n * @property {Array} data.urlset - Array of returned URLs\n * @property {string} data.urlset.url - single Url\n * @property {Object} data.sitemapindex - index of sitemap\n * @property {string} data.sitemapindex.sitemap - Sitemap\n * @example {\n *   error: \"There was an error!\"\n *   data: {\n *     url: 'linkedin.com',\n *     urlset: [{\n *       url: 'www.linkedin.com/project1'\n *     },[{\n *       url: 'www.linkedin.com/project2'\n *     }]\n *   }\n * }\n */\n\n/**\n * Resolve handler type for the promise in this.parse()\n *\n * @typedef {Object} SitesData\n *\n * @property {string} url - the original url used to query the data\n * @property {SitesArray} sites\n * @example {\n *   url: 'linkedin.com/sitemap.xml',\n *   sites: [\n *     'linkedin.com/project1',\n *     'linkedin.com/project2'\n *   ]\n * }\n */\n\n/**\n * An array of urls\n *\n * @typedef {String[]} SitesArray\n * @example [\n *   'www.google.com',\n *   'www.linkedin.com'\n * ]\n */\n"],"file":"sitemapper.js"}